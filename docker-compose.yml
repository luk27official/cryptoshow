services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args:
        UID: ${UID:-2727}
        GID: ${GID:-2727}
    user: "${UID:-2727}:${GID:-2727}"
    volumes:
      - ./data:/app/data
      - ./cache/torch:/home/cryptoshow/.cache/torch/hub/checkpoints
      - ./cache/cryptobench:/app/cryptobench
      - ./cache/cryptobench-small:/app/cryptobench-small
    ports:
      - "5000:5000"
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      - UID=${UID:-2727}
      - GID=${GID:-2727}
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
      - ENABLE_EXTERNAL_SSL_REQUESTS=${ENABLE_EXTERNAL_SSL_REQUESTS:-true}
    working_dir: /app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  worker-gpu:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args:
        UID: ${UID:-2727}
        GID: ${GID:-2727}
    user: "${UID:-2727}:${GID:-2727}"
    command: /app/.venv/bin/celery -A tasks.celery_app worker --loglevel=info -E
    volumes:
      - ./data:/app/data
      - ./cache/torch:/home/cryptoshow/.cache/torch/hub/checkpoints
      - ./cache/cryptobench:/app/cryptobench
      - ./cache/cryptobench-small:/app/cryptobench-small
    depends_on:
      - redis
      - backend
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - UID=${UID:-2727}
      - GID=${GID:-2727}
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
      - NVIDIA_DISABLE_REQUIRE=true
      - ENABLE_EXTERNAL_SSL_REQUESTS=${ENABLE_EXTERNAL_SSL_REQUESTS:-true}
      # - TF_GPU_ALLOCATOR=cuda_malloc_async
      # - TF_FORCE_GPU_ALLOW_GROWTH=true
      # - TF_USE_LEGACY_KERAS=1
    working_dir: /app
    profiles:
      - gpu
    healthcheck:
      test: ["CMD", "/app/.venv/bin/celery", "-A", "tasks.celery_app", "inspect", "ping", "-d", "celery@worker-gpu"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  worker-cpu:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args:
        UID: ${UID:-2727}
        GID: ${GID:-2727}
    user: "${UID:-2727}:${GID:-2727}"
    command: /app/.venv/bin/celery -A tasks.celery_app worker --loglevel=info -E
    volumes:
      - ./data:/app/data
      - ./cache/torch:/home/cryptoshow/.cache/torch/hub/checkpoints
      - ./cache/cryptobench:/app/cryptobench
      - ./cache/cryptobench-small:/app/cryptobench-small
    depends_on:
      - redis
      - backend
    environment:
      - UID=${UID:-2727}
      - GID=${GID:-2727}
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
      - ENABLE_EXTERNAL_SSL_REQUESTS=${ENABLE_EXTERNAL_SSL_REQUESTS:-true}
    working_dir: /app
    profiles:
      - cpu
    healthcheck:
      test: ["CMD", "/app/.venv/bin/celery", "-A", "tasks.celery_app", "inspect", "ping", "-d", "celery@worker-cpu"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - ./cache/redis:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  frontend:
    build: ./frontend
    depends_on:
      - backend
      - remove-monitoring-flag
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data:/app/data
      - ${SSL_PATH:-./frontend/ssl/}:/etc/nginx/ssl/
      - ${HTPASSWD_PATH:-./frontend/monitoring.htpasswd}:/etc/nginx/monitoring.htpasswd
      - ./frontend/maintenance:/app/maintenance
    environment:
      - ENABLE_SSL=${ENABLE_SSL:-false}
      - DOMAIN=${DOMAIN:-localhost}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  remove-monitoring-flag:
    image: busybox:glibc
    command: sh -c "rm -f /app/data/monitoring.flag"
    user: "${UID:-2727}:${GID:-2727}"
    volumes:
      - ./data:/app/data

  monitoring-flag:
    image: busybox:glibc
    command: sh -c "touch /app/data/monitoring.flag && chmod 777 /app/data/monitoring.flag && echo 'Monitoring flag created successfully'"
    user: "${UID:-2727}:${GID:-2727}"
    volumes:
      - ./data:/app/data
    profiles:
      - monitoring
    depends_on:
      - remove-monitoring-flag

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    user: "${UID:-2727}:${GID:-2727}"
    command: /app/.venv/bin/celery -A tasks.celery_app flower --url_prefix=/flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - ENABLE_EXTERNAL_SSL_REQUESTS=${ENABLE_EXTERNAL_SSL_REQUESTS:-true}
    profiles:
      - monitoring
    volumes:
      - ./data:/app/data
      - ./cache/torch:/home/cryptoshow/.cache/torch/hub/checkpoints
      - ./cache/cryptobench:/app/cryptobench
      - ./cache/cryptobench-small:/app/cryptobench-small
    working_dir: /app
    depends_on:
      - redis
      - backend

  celery-exporter:
    image: ghcr.io/danihodovic/celery-exporter:latest
    environment:
      - CE_BROKER_URL=redis://redis:6379/0
    profiles:
      - monitoring
    ports:
      - "9808:9808"
    depends_on:
      - flower

  prometheus:
    image: prom/prometheus
    profiles:
      - monitoring
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3001"
    profiles:
      - monitoring
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    user: "${UID:-2727}:${GID:-2727}"
    restart: unless-stopped
    environment:
      - GF_SERVER_HTTP_PORT=3001
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    depends_on:
      - prometheus
